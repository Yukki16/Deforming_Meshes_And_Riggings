#pragma kernel DeformMesh
#define THREAD_GROUP_SIZE_X 256

#include "Math.cginc"
#include "DeltaMushCommon.cginc"

struct OutputVertex
{
    float3 pos;
    float3 normal;
};
StructuredBuffer<float3> Vertices;
StructuredBuffer<float3> Normals;
StructuredBuffer<float4x4> Bones;
StructuredBuffer<OmegaStructWithIndex> Omegas;

int VertexCount;
RWStructuredBuffer<OutputVertex> Output;

void DecomposeMat(in float4x4 mat, out float3x3 Q, out float3 p, out float3 q)
{
	Q[0][0] = mat[0][0];
	Q[0][1] = mat[0][1];
	Q[0][2] = mat[0][2];
	Q[1][0] = mat[1][0];
	Q[1][1] = mat[1][1];
	Q[1][2] = mat[1][2];
	Q[2][0] = mat[2][0];
	Q[2][1] = mat[2][1];
	Q[2][2] = mat[2][2];

	p[0] = mat[3][0];
	p[1] = mat[3][1];
	p[2] = mat[3][2];

	q[0] = mat[0][3];
	q[1] = mat[1][3];
	q[2] = mat[2][3];
}

[numthreads(THREAD_GROUP_SIZE_X, 1, 1)]
void DeformMesh(uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
	int idx = THREAD_GROUP_SIZE_X * groupID.x + groupThreadID.x;
	if (idx >= VertexCount)
		return;

	float3 pos = Vertices[idx];
	float3 normal = Normals[idx];
	float4x4 mat = IDENTITY_MATRIX_4;
	OmegaStructWithIndex oswi0 = Omegas[idx * MAX_OMEGA_COUNT];
	if (oswi0.boneIndex >= 0)
	{
		float4x4 omega0 = float4x4(
			oswi0.m0,   oswi0.m1.x, oswi0.m2.x, oswi0.m3.x,
			oswi0.m1.x, oswi0.m1.y, oswi0.m2.y, oswi0.m3.y,
			oswi0.m2.x, oswi0.m2.y, oswi0.m2.z, oswi0.m3.z,
			oswi0.m3.x, oswi0.m3.y, oswi0.m3.z, oswi0.m3.w);
		mat = mul(Bones[oswi0.boneIndex], omega0);
		for (int i = 1; i < MAX_OMEGA_COUNT; ++i)
		{
			OmegaStructWithIndex oswi = Omegas[idx * MAX_OMEGA_COUNT + i];
			if (oswi.boneIndex < 0)
			{
				break;
			}
			float4x4 omega = float4x4(
				oswi.m0,   oswi.m1.x, oswi.m2.x, oswi.m3.x,
				oswi.m1.x, oswi.m1.y, oswi.m2.y, oswi.m3.y,
				oswi.m2.x, oswi.m2.y, oswi.m2.z, oswi.m3.z,
				oswi.m3.x, oswi.m3.y, oswi.m3.z, oswi.m3.w);
			mat += mul(Bones[oswi.boneIndex], omega);
		}
	}

	float3x3 Q = ZERO_MATRIX_3;
	float3 p = ZERO_VECTOR_3;
	float3 q = ZERO_VECTOR_3;
	DecomposeMat(mat, Q, p, q);

	float3x3 M = Q - Math_OutProduct(q, p);
	float3x3 U = ZERO_MATRIX_3;
	float3x3 V = ZERO_MATRIX_3;
	float3 D = ZERO_VECTOR_3;
	GetSVD3D(M, U, D, V);

	float3x3 R = mul(U, transpose(V));
	float3 t = q - mul(R, p);
	Output[idx].pos = mul(R, pos) + t;
	Output[idx].normal = mul(R, normal);
}
